[agent]
  ## Default data collection interval for all inputs
  interval = "30s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

###############################################################################
#                            PROCESSOR PLUGINS                                #
###############################################################################

[[processors.strings]]
  ## Replace all non-overlapping instances of old with new
  ## Trim the given prefix from the field
  [[processors.strings.trim_prefix]]
    field_key = "*"
    prefix = "Body_Data_Site_"
  [[processors.strings.trim_prefix]]
    field_key = "*"
    prefix = "Body_Data_0_"


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read formatted metrics from one or more HTTP endpoints
[[inputs.http]]
  # measurement name
  name_override = "smartmeter"
  # override default http query interval
  interval = "1m"

  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://172.16.0.171/solar_api/v1/GetMeterRealtimeData.cgi?Scope=System"
  ]
## Data format to consume.
  # json parsing
  data_format = "json"
  json_time_key = "Body_Data_0_TimeStamp"
  json_time_format = "unix"

  # data filtering
  # EnergyReal_WAC_Plus_Absolute ... Import
  # EnergyReal_WAC_Minus_Absolute ... Export
  # Power* individual phases; *_Sum only sum of all phases.
  fieldpass = [
    "Body_Data_0_Energy*",
    "Body_Data_0_Current_AC_*",
    "Body_Data_0_Power*",
    # "Body_Data_0_*_Sum"
    ]

[[inputs.http]]
  # measurement name
  name_override = "powerflow"
  # override default http query interval
  interval = "1m"

  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://172.16.0.171/solar_api/v1/GetPowerFlowRealtimeData.fcgi"
  ]

  ## Data format to consume.
  # json parsing
  data_format = "json"
  json_time_key = "Head_Timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"

  # data filtering
  fieldpass = [
    "Body_Data_Site_E_Day",
    "Body_Data_Site_P_*",
    "Body_Data_Site_rel_*",
    "Body_Data_Site_E_Total",
    "Body_Data_Site_BackupMode",
    "Body_Data_Site_Meter_Location",
    "Body_Data_Inverters_1_E_Day",
    "Body_Data_Inverters_1_SOC"
  ]


[[inputs.http]]
  # measurement name
  name_override = "storage"
  # override default http query interval
  interval = "1m"

  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://172.16.0.171/solar_api/v1/GetStorageRealtimeData.cgi?Scope=System"
  ]

## Data format to consume.
  # json parsing
  data_format = "json"
  json_time_key = "Head_Timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"

  # data filtering, not here, take everything.
#  fieldpass = [
#    "Body_Data_0_Controller_Cur*",
#    "Body_Data_0_Controller_Enable",
#    "Body_Data_0_Controller_StateOfCharge_Relative",
#    "Body_Data_0_Controller_Voltage_DC",
#    "Body_Data_0_Controller_Current_DC",
#    "Body_Data_0_Controller_Temperature_Cell"
#  ]


# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  urls = ["http://127.0.0.1:8086"]
  ## The target database for metrics; will be created as needed.
  database = "telegraf_fronius"
  #skip_database_creation = true
  ## HTTP Basic Auth
  username = "telegraf"
  password = "metrics"

#[[outputs.file]]
  ## Files to write to, "stdout" is a specially handled file.
#files = ["stdout","/home/zotac/telegraf-fronius.out"]
